generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String            @id @default(cuid())
  email         String            @unique
  name          String
  phone         String?
  createdAt     DateTime          @default(now())
  currentDay    Int               @default(1)
  startedAt     DateTime?
  completedAt   DateTime?
  totalXP       Int               @default(0)
  currentStreak Int               @default(0)
  longestStreak Int               @default(0)
  badges        String[]
  avatar        String?
  bio           String?
  linkedinUrl   String?
  twitterUrl    String?
  websiteUrl    String?
  dailyProgress DailyProgress[]
  portfolio     StartupPortfolio?
  xpEvents      XPEvent[]
}

model DailyProgress {
  id             String    @id @default(cuid())
  userId         String
  day            Int
  startedAt      DateTime
  completedAt    DateTime?
  tasksCompleted Json
  proofUploads   String[]
  reflection     String?
  xpEarned       Int       @default(0)
  user           User      @relation(fields: [userId], references: [id])

  @@unique([userId, day])
}

model StartupPortfolio {
  id               String   @id @default(cuid())
  userId           String   @unique
  startupName      String?
  tagline          String?
  logo             String?
  problemStatement String?
  solution         String?
  valueProposition String?
  targetMarket     Json?
  competitors      Json?
  marketSize       Json?
  revenueStreams   Json?
  pricingStrategy  Json?
  domain           String?
  socialHandles    Json?
  entityType       String?
  complianceStatus Json?
  mvpDescription   String?
  features         Json?
  userFeedback     Json?
  salesStrategy    Json?
  customerPersonas Json?
  projections      Json?
  fundingNeeds     Int?
  pitchDeck        String?
  onePageSummary   String?
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
}

model XPEvent {
  id          String   @id @default(cuid())
  userId      String
  type        String
  points      Int
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model DailyLesson {
  id                  String   @id @default(cuid())
  day                 Int      @unique
  title               String
  briefContent        String
  actionItems         Json
  resources           Json
  estimatedTime       Int
  xpReward            Int      @default(20)
  expertTips          String[]
  focus               String?
  reflectionQuestions String[]
  successMetrics      String[]
}

model Badge {
  id          String @id @default(cuid())
  code        String @unique
  name        String
  description String
  icon        String
  requirement String
  xpRequired  Int?
  dayRequired Int?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Subscription {
  id                String   @id
  userId            String   @unique
  status            String
  startDate         DateTime
  expiryDate        DateTime
  razorpayOrderId   String?
  razorpayPaymentId String?
  amount            Int
  createdAt         DateTime @default(now())
}
